---
- name: Repave Pop!_OS
  hosts: popos
  become: true
  vars:
    docker_compose_version: "2.4.1"
    jetbrains_toolbox_version: "1.23.11731"
    kubectl_version: 1.23.5

  tasks:
  - name: Install Apps
    tags: apps
    ansible.builtin.apt:
      name:
      - apt-transport-https
      - code
      - remmina
      - steam
      - zsh
      state: latest
      cache_valid_time: 3600

  - name: Make zsh the users default shell
    tags: shell
    ansible.builtin.user:
      name: "{{ ansible_user }}"
      shell: /usr/bin/zsh

  - name: Downloaded Apps
    tags: 3rd_party_apps
    block:
    - name: Add Google apt signing key
      ansible.builtin.apt_key:
        url: https://dl.google.com/linux/linux_signing_key.pub
        state: present

    - name: Add Chrome repo
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main
        state: present
        filename: google-chrome

    - name: Install Google Chrome
      ansible.builtin.apt:
        name: google-chrome-stable
        state: latest
        update_cache: true

    - name: Unpack Jetbrains Toolbox
      ansible.builtin.unarchive:
        src: https://download.jetbrains.com/toolbox/jetbrains-toolbox-{{ jetbrains_toolbox_version }}.tar.gz
        dest: /tmp
        remote_src: yes

    # - name: Install Jetbrains Toolbox  # apt deb doesn't work either
    #   ansible.builtin.command:
    #     cmd: /tmp/jetbrains-toolbox-{{ jetbrains_toolbox_version }}/jetbrains-toolbox

    - name: Install Google Cloud signing key
      ansible.builtin.apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add Kubernetes repo
      ansible.builtin.apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes

    - name: Install kubectl
      ansible.builtin.apt:
        name: kubectl={{ kubectl_version }}-00
        allow_downgrade: yes
        state: present
        update_cache: true

    - name: Install minikube
      ansible.builtin.apt:
        deb: https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb

    - name: Check VMware Workstation exists
      ansible.builtin.stat:
        path: /etc/vmware/config
      register: vmware_workstation

    - name: Download VMware Workstation
      ansible.builtin.get_url:
        url: https://www.vmware.com/go/getworkstation-linux
        dest: /tmp/workstation-linux
        mode: '+x'
      when: vmware_workstation.stat.exists == False

    - name: Install VMware Workstation
      ansible.builtin.command:
        cmd: /tmp/workstation-linux --required --eulas-agreed
      when: vmware_workstation.stat.exists == False

  - name: Install Python build dependencies
    tags: python
    ansible.builtin.apt:
      name:
      - python3-dev
      - python3-pip
      - python3-venv
      - make
      - build-essential
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - wget
      - curl
      - llvm
      - libncursesw5-dev
      - xz-utils
      - tk-dev
      - libxml2-dev
      - libxmlsec1-dev
      - libffi-dev
      - liblzma-dev
      state: latest
      cache_valid_time: 3600

  - name: Install Docker Engine
    tags: docker
    block:
    - name: Remove old Docker versions
      ansible.builtin.apt:
        name:
        - docker
        - docker-engine
        - docker.io
        - containerd
        - runc
        state: absent

    - name: Install Docker prerequisites
      ansible.builtin.apt:
        name:
        - ca-certificates
        - curl
        - gnupg
        - lsb-release
        state: present
        cache_valid_time: 3600

    - name: Add Docker GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu impish stable
        state: present

    - name: Install Docker
      ansible.builtin.apt:
        name:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        state: latest
        update_cache: true

    - name: Add non-root user
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Check docker-compose exists
      ansible.builtin.stat:
        path: /usr/local/bin/docker-compose
      register: docker_compose_exists

    - name: Download docker-compose {{ docker_compose_version }}
      ansible.builtin.get_url:
        url: https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-Linux-x86_64
        dest: /tmp/docker-compose
        mode: '+x'
      when: docker_compose_exists.stat.exists == False

    - name: Check docker-compose is downloaded
      ansible.builtin.stat:
        path: /tmp/docker-compose
      register: docker_compose_dl

    - name: Move docker-compose to /usr/local/bin/docker-compose
      ansible.builtin.command:
        cmd: mv /tmp/docker-compose /usr/local/bin/docker-compose
      when: docker_compose_dl.stat.exists

- name: Repave Pop!_OS non-elevated
  hosts: popos
  become: false

  tasks:
  - name: Configure Python tools
    tags: python
    block:
    - name: Check pyenv exists
      ansible.builtin.stat:
        path: /home/{{ansible_user}}/.pyenv/bin/pyenv
      register: pyenv_exists

    - name: Run pyenv-installer
      ansible.builtin.shell:
        cmd: curl https://pyenv.run | bash
      when: pyenv_exists.stat.exists == False

    - name: Check pipx exists
      ansible.builtin.stat:
        path: ~/.local/bin/pipx
      register: pipx_exists

    - name: Install pipx
      ansible.builtin.pip:
        name: pipx
        extra_args: --user
        state: latest
      when: pipx_exists.stat.exists == False

    - name: Configure pipx in bash
      ansible.builtin.shell:
        executable: /usr/bin/bash
        cmd: python3 -m pipx ensurepath

    - name: Configure pipx in zsh
      ansible.builtin.shell:
        executable: /usr/bin/zsh
        cmd: python3 -m pipx ensurepath

    - name: Install pipx packages with dependencies
      community.general.pipx:
        name: "{{ item }}"
        install_deps: yes
        state: install
      with_items:
        - ansible
        - ipykernel

    - name: Install pipx packages
      community.general.pipx:
        name: "{{ item }}"
        state: install
      with_items:
        - bandit
        - black
        - poetry
        - Pygments
        - pytest

    - name: Upgrade pipx packages
      community.general.pipx:
        state: upgrade_all

  - name: Flatpak Apps
    tags: flatpak
    block:
    - name: Install system flatpaks
      community.general.flatpak:
        name:
        - com.bitwarden.desktop
        - org.pulseaudio.pavucontrol
        state: present
        method: user  # Issue with installing system flatpaks. Installing as user instead

    - name: Install user flatpaks
      community.general.flatpak:
        name:
        - com.getpostman.Postman
        - com.microsoft.Teams
        - com.slack.Slack
        - tech.feliciano.pocket-casts
        state: present
        method: user

  - name: Configure Oh My Zsh
    tags: shell
    block:
    - name: Check Oh My Zsh exists
      ansible.builtin.stat:
        path: ~/.oh-my-zsh
      register: ohmyzsh_exists

    - name: Install Oh My Zsh
      ansible.builtin.shell:
        cmd: sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"; exit
      when: ohmyzsh_exists.exists is false

    - name: Set Oh My Zsh theme
      ansible.builtin.lineinfile:
        path: ~/.zshrc
        regexp: ^ZSH_THEME="robbyrussel"
        line: ZSH_THEME="crcandy"

    - name: Configure Oh My Zsh plugins
      ansible.builtin.lineinfile:
        path: ~/.zshrc
        regexp: ^plugins=\(.*
        line: plugins=(git colorize minikube poetry pyenv urltools)

    # - name: Configure .zprofile
    #   ansible.builtin.lineinfile:
    #     path: ~/.zprofile
    #     regexp: ^{{ item }}
    #     line: '{{ item | replace("\\", "") }}'
    #     insertafter: EOF
    #   with_items:
    #     - export PYENV_ROOT=\"\$HOME/.pyenv\"
    #     - export PATH=\"\$PYENV_ROOT/bin:\$PATH\"
    #     - eval \"\$(pyenv init --path)\"

    # - name: Configure .profile
    #   ansible.builtin.lineinfile:
    #     path: ~/.profile
    #     regexp: ^{{ item }}
    #     line: '{{ item | replace("\\", "") }}'
    #     insertafter: EOF
    #   with_items:
    #     - export PYENV_ROOT=\"\$HOME/.pyenv\"
    #     - export PATH=\"\$PYENV_ROOT/bin:\$PATH\"
    #     - eval \"\$(pyenv init --path)\"
